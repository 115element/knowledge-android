plugins {
    id 'com.android.application'
}



android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.knowledge_android"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //用于制作多渠道包配置
        //flavorDimensions "company"
    }


    //版本发布设置
    signingConfigs {
        //debug {
        //    storeFile file("debug_keystore")  //指定KeyStore文件的位置
        //    storePassword "wwwkeystore"       //指定密码
        //    keyAlias "main_key"               //指定别名
        //    keyPassword "wwwkeystore"         //指定别名密码
        //}
        release {
            storeFile file("www_keystore")
            storePassword "wwwkeystore"
            keyAlias "main_key"
            keyPassword "wwwkeystore"
        }
        //1.有利于程序升级：当新版程序和旧版程序的数字证书相同时，Android系统才会认为这两个程序是同一个程序的不同版本。如果新版程序和旧版程序的数字证书不相同，则Android系统认为他们是不同的程序，并产生冲突，会要求新程序更改包名。
        //2.有利于程序的模块化设计和开发：Android系统允许拥有同一个数字签名的程序运行在一个进程中，Android程序会将他们视为同一个程序。所以开发者可以将自己的程序分模块开发，而用户只需要在需要的时候下载适当的模块。
        //3.可以通过权限(permission)的方式在多个程序间共享数据和代码：Android提供了基于数字证书的权限赋予机制，应用程序可以和其他的程序共享概功能或者数据给那那些与自己拥有相同数字证书的程序。如果某个权限(permission)的protectionLevel是signature，则这个权限就只能授予那些跟该权限所在的包拥有同一个数字证书的程序。
    }


    //代码编译设置
    buildTypes {
        //代码混淆配置,防止别人得到Apk后进行反编译得到我们的源码
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            debuggable true
        }
    }
    dexOptions {
        jumboMode = true
        javaMaxHeapSize = '2g'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding = 'UTF-8'
    }


    //2021-09-14 自己添加的指定jni文件路径
    sourceSets {
        main {
            //在选择 Android 的选项下面显示的jniLibs 目录和选择 Project 选项下面的libs 其实是一个
            //但是在Android选项下面的jniLibs不是自动生成的   需要在module的build.gradle里面的android下面配置sourceSets
            jniLibs.srcDirs = ['src/main/jniLibs'] //就是你存放so文件夹的不同cup目录地址


            //安卓指定多个layout目录的方法,以及指定多个drawable目录问题
            res.srcDirs=[

                    //指定多个Drawable目录的办法
                    'src/main/res/drawable-v24', //你自己建立的drawable目录
                    'src/main/res/drawable', //必须要有

                    //指定多个Layout目录的办法
                    'src/main/res/layout-land', //你自己建立的layout目录
                    'src/main/res/layout_coupon', //你自己建立的layout目录
                    'src/main/res/layout',//必须要有
                    'src/main/res',//必须要有，倒数两个顺序必须是这样子，不能乱
            ]
        }
    }

    //*************************************安卓饿了么组件需要,数据绑定功能*************************************
    dataBinding {
        enabled true
    }
    //*************************************生成ActivityMainDataBind类，重要*********************


    //解除依赖冲突问题，注意，只添加这条语句即可
    //*************************************
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
    //*************************************


    //渠道包设置，假设我们打包的渠道为：小米商店，百度，豌豆荚
    // 所谓ProductFlavors其实就是可定义的产品特性，配合 manifest merger 使用的时候就可以达成在一次编译过程中产生多个具有自己特性配置的版本。
    // 上面这个配置的作用就是，为每个渠道包产生不同的 CHANNEL_VALUE 的值。
//    productFlavors {
//        xiaomi {
//            dimension "company"
//            manifestPlaceholders = [CHANNEL_VALUE: "xiaomi"]
//        }
//        baidu {
//            dimension "company"
//            manifestPlaceholders = [CHANNEL_VALUE: "baidu"]
//        }
//        wandoujia {
//            dimension "company"
//            manifestPlaceholders = [CHANNEL_VALUE: "wandoujia"]
//        }
//    }
//    //安卓多渠道包配置
//    applicationVariants.all { variant ->
//        variant.outputs.all { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                def fileName
//                if (variant.buildType.name != "release") {
//                    // 输出apk名称为
//                    fileName = "Xxx_v${variant.versionName}_${variant.productFlavors[0].name}.apk"
//                } else {
//                    fileName = "Xxx_v${variant.versionName}_${"Test"}_debug.apk"
//                }
//                outputFileName = fileName
//            }
//        }
//    }

}


dependencies {
    //此种方式简单粗暴,但是不允许同时出现同一模块不同编译类型的jar(或aar),
    //例如,如果libs同时存在test-release.aar和test-debug.aar,他们都是来自同一个module的打包,但是只是编译类型不一样,如果同时存在的话,会编译不过.
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })


    //implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    //implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    //引入本地jar包
    implementation files('libs/LanPP.jar')
    implementation files('libs/badgeview.jar')

    //数据绑定MVCC功能
    //implementation 'androidx.databinding:library:3.2.0-alpha11'

    //implementation 'org.junit.jupiter:junit-jupiter'
    //testImplementation 'junit:junit:4.13.2'
    //androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    //androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    /*MQTT协议*/
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'
    //implementation 'org.bouncycastle:bcpkix-jdk15on:1.59'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.47'

    /*OKHTTP*/
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'

    /*JSON*/
    implementation 'com.google.code.gson:gson:2.8.6'

    /*解决65535问题*/
    implementation 'androidx.multidex:multidex:2.0.1'

    /*角标*/
    implementation 'q.rorbin:badgeview:1.1.3'

    //Android实现二维码扫描功能
    implementation 'com.google.zxing:core:3.3.3'
    //implementation 'com.android.support:appcompat-v7:28.0.0'
    //implementation 'com.android.support:design:28.0.0'

    //viewpager的导航条扩展
    //gradle7.0之后，需要在settings.gradle中配置： maven {url "https://jitpack.io"}
    implementation 'com.github.hackware1993:MagicIndicator:1.5.0'

    //@OnUiThread注解，运行代码在UI线程 、@OnBackground运行在非UI线程
    implementation 'com.arasthel:swissknife:1.3.3'

    //RoundImageView
    implementation 'com.makeramen:roundedimageview:2.2.1'

    //如何引入本地的Jar包  因为我们已经引入Gson了，这里只是演示下
    //implementation files('libs/gson-2.2.4.jar')
    implementation files('libs/ormlite-android-5.1.jar')
    implementation files('libs/ormlite-core-5.1.fix.jar')
    implementation files('libs/ziptool.jar')

    //如何引入另外一个Module
    implementation project(':linkage-recyclerview')
    implementation project(':labels-view')
    implementation project(':labels-view-improve')

    //安卓饿了么组件需要
    implementation 'com.github.bumptech.glide:glide:4.9.0'
    implementation 'junit:junit:4.12'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.9.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0-alpha04'


    //// ORMLite -> use our bug fixed version instead, in libs/ormlite*.jar
    //implementation 'com.j256.ormlite:ormlite-core:5.1'
    //implementation 'com.j256.ormlite:ormlite-android:5.1'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: '30.1.1-android'


    implementation 'com.alibaba:fastjson:1.2.51'

    implementation 'org.apache.httpcomponents:httpclient:4.5.6'

    // 微信刷脸facepos
    implementation files('libs\\wxfacepay-release-2.21.101.aar')
    implementation 'com.tencent.mars:mars-core:1.2.4'
    implementation 'com.lzy.net:okgo:3.0.4'

    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'org.apache.commons:commons-io:1.3.2'

    //安卓程序崩溃日志记载
    implementation 'com.blankj:utilcode:1.29.0'

    //@BindView注解支持
    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'


    //弹性布局
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    //官方比例布局
    //noinspection GradleCompatible
    implementation 'com.android.support:percent:22.2.0'


    //带下滑的TextView
    implementation 'talon.com:underlineText:1.0.0'

//    configurations {
//        all*.exclude group: 'com.google.code.gson'
//    }


    //Google提供的一个网络客户端
    // https://mvnrepository.com/artifact/com.android.volley/volley
    implementation group: 'com.android.volley', name: 'volley', version: '1.2.1'


}

